/**
 * @packageDocumentation
 * @module api.functional.roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, IPropagation } from "@nestia/fetcher";
import type { CreateRoleDTO } from "../../structures/CreateRoleDTO";
import type { FailedRequest } from "../../structures/FailedRequest";
import type { SuccesfulRequestArrayRoleDTO } from "../../structures/SuccesfulRequestArrayRoleDTO";
import type { SuccesfulRequestRoleDTO } from "../../structures/SuccesfulRequestRoleDTO";
import type { UpdateRolePermissionsDTO } from "../../structures/UpdateRolePermissionsDTO";
export * as all from "./all";
/**
 * @controller RoleController.findAll
 * @path GET /roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function findAll(connection: IConnection): Promise<findAll.Output>;
export declare namespace findAll {
    type Output = IPropagation<{
        200: SuccesfulRequestArrayRoleDTO | FailedRequest;
    }, 200>;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/roles";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: () => string;
}
/**
 * @controller RoleController.create
 * @path POST /roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, createRoleDto: create.Input): Promise<create.Output>;
export declare namespace create {
    type Input = CreateRoleDTO;
    type Output = IPropagation<{
        201: SuccesfulRequestRoleDTO | FailedRequest;
    }, 201>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/roles";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller RoleController.updatePermissions
 * @path PATCH /roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function updatePermissions(connection: IConnection, updatePermissionsDto: updatePermissions.Input): Promise<updatePermissions.Output>;
export declare namespace updatePermissions {
    type Input = UpdateRolePermissionsDTO;
    type Output = IPropagation<{
        200: SuccesfulRequestRoleDTO | FailedRequest;
    }, 200>;
    const METADATA: {
        readonly method: "PATCH";
        readonly path: "/roles";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: () => string;
}
