/**
 * @packageDocumentation
 * @module api.functional.roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { CreateRoleDTO } from "../../structures/CreateRoleDTO";
import type { FailedRequest } from "../../structures/FailedRequest";
import type { SuccesfulRequestArrayRoleDTO } from "../../structures/SuccesfulRequestArrayRoleDTO";
import type { SuccesfulRequestRoleDTO } from "../../structures/SuccesfulRequestRoleDTO";
import type { UpdateRolePermissionsDTO } from "../../structures/UpdateRolePermissionsDTO";

export * as all from "./all";

/**
 * @controller RoleController.findAll
 * @path GET /roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
): Promise<findAll.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...findAll.METADATA,
    template: findAll.METADATA.path,
    path: findAll.path(),
  });
}
export namespace findAll {
  export type Output = IPropagation<
    {
      200: SuccesfulRequestArrayRoleDTO | FailedRequest;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/roles",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/roles";
}

/**
 * @controller RoleController.create
 * @path POST /roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  createRoleDto: create.Input,
): Promise<create.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    createRoleDto,
  );
}
export namespace create {
  export type Input = CreateRoleDTO;
  export type Output = IPropagation<
    {
      201: SuccesfulRequestRoleDTO | FailedRequest;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/roles";
}

/**
 * @controller RoleController.updatePermissions
 * @path PATCH /roles
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function updatePermissions(
  connection: IConnection,
  updatePermissionsDto: updatePermissions.Input,
): Promise<updatePermissions.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...updatePermissions.METADATA,
      template: updatePermissions.METADATA.path,
      path: updatePermissions.path(),
    },
    updatePermissionsDto,
  );
}
export namespace updatePermissions {
  export type Input = UpdateRolePermissionsDTO;
  export type Output = IPropagation<
    {
      200: SuccesfulRequestRoleDTO | FailedRequest;
    },
    200
  >;

  export const METADATA = {
    method: "PATCH",
    path: "/roles",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/roles";
}
