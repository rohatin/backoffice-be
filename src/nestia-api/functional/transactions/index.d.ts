/**
 * @packageDocumentation
 * @module api.functional.transactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
import type { IConnection, IPropagation } from "@nestia/fetcher";
import type { CreateTransactionDTO } from "../../structures/CreateTransactionDTO";
import type { FailedRequest } from "../../structures/FailedRequest";
import type { SuccesfulRequestArrayTransactionDTO } from "../../structures/SuccesfulRequestArrayTransactionDTO";
import type { SuccesfulRequestTransactionDTO } from "../../structures/SuccesfulRequestTransactionDTO";
/**
 * @controller TransactionController.create
 * @path POST /transactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function create(connection: IConnection, body: create.Input): Promise<create.Output>;
export declare namespace create {
    type Input = CreateTransactionDTO;
    type Output = IPropagation<{
        201: SuccesfulRequestTransactionDTO | FailedRequest;
    }, 201>;
    const METADATA: {
        readonly method: "POST";
        readonly path: "/transactions";
        readonly request: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 201;
    };
    const path: () => string;
}
/**
 * @controller TransactionController.findAll
 * @path GET /transactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function findAll(connection: IConnection): Promise<findAll.Output>;
export declare namespace findAll {
    type Output = IPropagation<{
        200: SuccesfulRequestArrayTransactionDTO | FailedRequest;
    }, 200>;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/transactions";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: () => string;
}
/**
 * @controller TransactionController.findAllForUser
 * @path GET /transactions/:userId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export declare function findAllForUser(connection: IConnection, targetUserId: number): Promise<findAllForUser.Output>;
export declare namespace findAllForUser {
    type Output = IPropagation<{
        200: SuccesfulRequestArrayTransactionDTO | FailedRequest;
    }, 200>;
    const METADATA: {
        readonly method: "GET";
        readonly path: "/transactions/:userId";
        readonly request: null;
        readonly response: {
            readonly type: "application/json";
            readonly encrypted: false;
        };
        readonly status: 200;
    };
    const path: (targetUserId: number) => string;
}
