/**
 * @packageDocumentation
 * @module api.functional.transactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { CreateTransactionDTO } from "../../structures/CreateTransactionDTO";
import type { FailedRequest } from "../../structures/FailedRequest";
import type { SuccesfulRequestArrayTransactionDTO } from "../../structures/SuccesfulRequestArrayTransactionDTO";
import type { SuccesfulRequestTransactionDTO } from "../../structures/SuccesfulRequestTransactionDTO";

/**
 * @controller TransactionController.create
 * @path POST /transactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function create(
  connection: IConnection,
  body: create.Input,
): Promise<create.Output> {
  return PlainFetcher.propagate<any, any>(
    {
      ...connection,
      headers: {
        ...connection.headers,
        "Content-Type": "application/json",
      },
    },
    {
      ...create.METADATA,
      template: create.METADATA.path,
      path: create.path(),
    },
    body,
  );
}
export namespace create {
  export type Input = CreateTransactionDTO;
  export type Output = IPropagation<
    {
      201: SuccesfulRequestTransactionDTO | FailedRequest;
    },
    201
  >;

  export const METADATA = {
    method: "POST",
    path: "/transactions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/transactions";
}

/**
 * @controller TransactionController.findAll
 * @path GET /transactions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAll(
  connection: IConnection,
): Promise<findAll.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...findAll.METADATA,
    template: findAll.METADATA.path,
    path: findAll.path(),
  });
}
export namespace findAll {
  export type Output = IPropagation<
    {
      200: SuccesfulRequestArrayTransactionDTO | FailedRequest;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/transactions",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/transactions";
}

/**
 * @controller TransactionController.findAllForUser
 * @path GET /transactions/:userId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findAllForUser(
  connection: IConnection,
  targetUserId: number,
): Promise<findAllForUser.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...findAllForUser.METADATA,
    template: findAllForUser.METADATA.path,
    path: findAllForUser.path(targetUserId),
  });
}
export namespace findAllForUser {
  export type Output = IPropagation<
    {
      200: SuccesfulRequestArrayTransactionDTO | FailedRequest;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/transactions/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (targetUserId: number) =>
    `/transactions/${encodeURIComponent(targetUserId?.toString() ?? "null")}`;
}
