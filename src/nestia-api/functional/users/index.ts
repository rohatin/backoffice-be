/**
 * @packageDocumentation
 * @module api.functional.users
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection, IPropagation } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";

import type { FailedRequest } from "../../structures/FailedRequest";
import type { SuccesfulRequestUserDTO } from "../../structures/SuccesfulRequestUserDTO";

/**
 * @controller UserController.findById
 * @path GET /users/:userId
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function findById(
  connection: IConnection,
  targetUserId: number,
): Promise<findById.Output> {
  return PlainFetcher.propagate<any>(connection, {
    ...findById.METADATA,
    template: findById.METADATA.path,
    path: findById.path(targetUserId),
  });
}
export namespace findById {
  export type Output = IPropagation<
    {
      200: SuccesfulRequestUserDTO | FailedRequest;
    },
    200
  >;

  export const METADATA = {
    method: "GET",
    path: "/users/:userId",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (targetUserId: number) =>
    `/users/${encodeURIComponent(targetUserId?.toString() ?? "null")}`;
}
